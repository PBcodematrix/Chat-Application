{"version":3,"file":"static/js/632.64f96d11.chunk.js","mappings":"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","sources":["components/hook-form/FormProvider.js","components/hook-form/RHFTextField.js","sections/settings/ProfileForm.js","pages/dashboard/Profile.js","../node_modules/phosphor-react/src/icons/CaretLeft.tsx"],"sourcesContent":["import PropTypes from 'prop-types';\r\n// form\r\nimport { FormProvider as Form } from 'react-hook-form';\r\n\r\n\r\n\r\nFormProvider.propTypes = {\r\n  children: PropTypes.node,\r\n  methods: PropTypes.object,\r\n  onSubmit: PropTypes.func,\r\n};\r\n\r\nexport default function FormProvider({ children, onSubmit, methods }) {\r\n  return (\r\n    <Form {...methods}>\r\n      <form onSubmit={onSubmit}>{children}</form>\r\n    </Form>\r\n  );\r\n}","import PropTypes from 'prop-types';\r\n// form\r\nimport { useFormContext, Controller } from 'react-hook-form';\r\n// @mui\r\nimport { TextField } from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nRHFTextField.propTypes = {\r\n  name: PropTypes.string,\r\n  label:PropTypes.string,\r\n  helperText: PropTypes.node,\r\n};\r\n\r\nexport default function RHFTextField({ name, helperText, ...other }) {\r\n  const { control } = useFormContext();\r\n\r\n  return (\r\n    <Controller\r\n      name={name}\r\n      control={control}\r\n      render={({ field, fieldState: { error } }) => (\r\n        <TextField\r\n          {...field}\r\n          fullWidth\r\n          \r\n          value={typeof field.value === 'number' && field.value === 0 ? '' : field.value}\r\n          error={!!error}\r\n          helperText={error ? error?.message : helperText}\r\n          {...other}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}","import React, { useCallback } from \"react\";\r\nimport * as Yup from \"yup\";\r\n// form\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { Button, Stack } from \"@mui/material\";\r\nimport FormProvider from \"../../components/hook-form/FormProvider\";\r\nimport { RHFTextField } from \"../../components/hook-form\";\r\n\r\nconst ProfileForm = () => {\r\n\r\n\r\n\r\n\r\n  const ProfileSchema = Yup.object().shape({\r\n    firstName: Yup.string().required(\"Name is required\"),\r\n    about: Yup.string().required(\"About is required\"),\r\n    avatar: Yup.string().required(\"Avatar is required\").nullable(true),\r\n  });\r\n\r\n  const defaultValues = {\r\n    firstName: \"\",\r\n    about: \"\",\r\n    \r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(ProfileSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    watch,\r\n    control,\r\n    setValue,\r\n    handleSubmit,\r\n    formState: { isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const values = watch();\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      //   Send API request\r\n      console.log(\"DATA\", data);\r\n     \r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleDrop = useCallback(\r\n    (acceptedFiles) => {\r\n      const file = acceptedFiles[0];\r\n\r\n\r\n      const newFile = Object.assign(file, {\r\n        preview: URL.createObjectURL(file),\r\n      });\r\n\r\n      if (file) {\r\n        setValue(\"avatar\", newFile, { shouldValidate: true });\r\n      }\r\n    },\r\n    [setValue]\r\n  );\r\n\r\n  return (\r\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n      <Stack spacing={4}>\r\n\r\n        <RHFTextField\r\n          helperText={\"This name is visible to your contacts\"}\r\n          name=\"firstName\"\r\n          label=\"First Name\"\r\n        />\r\n        <RHFTextField multiline rows={4} name=\"about\" label=\"About\" />\r\n\r\n        <Stack direction={\"row\"} justifyContent=\"end\">\r\n          <Button\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            // loading={isSubmitSuccessful || isSubmitting}\r\n          >\r\n            Save\r\n          </Button>\r\n        </Stack>\r\n      </Stack>\r\n    </FormProvider>\r\n  );\r\n};\r\n\r\nexport default ProfileForm;","import React from \"react\";\r\nimport { Box, IconButton, Stack, Typography } from \"@mui/material\";\r\nimport { CaretLeft } from \"phosphor-react\";\r\nimport ProfileForm from \"../../sections/settings/ProfileForm\";\r\n\r\n\r\nconst Profile = () => {\r\n  \r\n\r\n  return (\r\n    <>\r\n      <Stack direction=\"row\" sx={{ width: \"100%\" }}>\r\n        {/* Left Pane */}\r\n        <Box\r\n          sx={{\r\n            overflowY: \"scroll\",\r\n\r\n            height: \"100vh\",\r\n            width: 320,\r\n            backgroundColor: (theme) =>\r\n              theme.palette.mode === \"light\"\r\n                ? \"#F8FAFF\"\r\n                : theme.palette.background,\r\n\r\n            boxShadow: \"0px 0px 2px rgba(0, 0, 0, 0.25)\",\r\n          }}\r\n        >\r\n          <Stack p={4} spacing={5}>\r\n            {/* Header */}\r\n            <Stack direction=\"row\" alignItems={\"center\"} spacing={3}>\r\n              <IconButton>\r\n                <CaretLeft size={24} color={\"#4B4B4B\"} />\r\n              </IconButton>\r\n\r\n              <Typography variant=\"h5\">Profile</Typography>\r\n            </Stack>\r\n\r\n            {/* Profile Edit Form */}\r\n            <ProfileForm />\r\n          </Stack>\r\n        </Box>\r\n\r\n        {/* Right Panel */}\r\n        <Box\r\n          sx={{\r\n            height: \"100%\",\r\n            width: \"calc(100vw - 420px )\",\r\n            backgroundColor: (theme) =>\r\n              theme.palette.mode === \"light\"\r\n                ? \"#FFF\"\r\n                : theme.palette.background.paper,\r\n            borderBottom: \"6px solid #0162C4\",\r\n          }}\r\n        ></Box>\r\n      </Stack>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;","/* GENERATED FILE */\nimport React, { forwardRef } from \"react\";\n\nimport {\n  IconWeight,\n  IconProps,\n  PaintFunction,\n  renderPathForWeight,\n} from \"../lib\";\nimport IconBase, { RenderFunction } from \"../lib/IconBase\";\n\nconst pathsByWeight = new Map<IconWeight, PaintFunction>();\n\npathsByWeight.set(\"bold\", (color: string) => (\n  <>\n    <polyline\n      points=\"160 208 80 128 160 48\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n  </>\n));\n\npathsByWeight.set(\"duotone\", (color: string) => (\n  <>\n    <polygon points=\"160 208 80 128 160 48 160 208\" opacity=\"0.2\" />\n    <polygon\n      points=\"160 208 80 128 160 48 160 208\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\npathsByWeight.set(\"fill\", () => (\n  <>\n    <path d=\"M163.1,40.6a8.4,8.4,0,0,0-8.8,1.7l-80,80a8.1,8.1,0,0,0,0,11.4l80,80A8.3,8.3,0,0,0,160,216a8.5,8.5,0,0,0,3.1-.6A8,8,0,0,0,168,208V48A8,8,0,0,0,163.1,40.6Z\" />\n  </>\n));\n\npathsByWeight.set(\"light\", (color: string) => (\n  <>\n    <polyline\n      points=\"160 208 80 128 160 48\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n  </>\n));\n\npathsByWeight.set(\"thin\", (color: string) => (\n  <>\n    <polyline\n      points=\"160 208 80 128 160 48\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n  </>\n));\n\npathsByWeight.set(\"regular\", (color: string) => (\n  <>\n    <polyline\n      points=\"160 208 80 128 160 48\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\nconst renderPath: RenderFunction = (weight: IconWeight, color: string) =>\n  renderPathForWeight(weight, color, pathsByWeight);\n\nconst CaretLeft = forwardRef<SVGSVGElement, IconProps>((props, ref) => (\n  <IconBase ref={ref} {...props} renderPath={renderPath} />\n));\n\nCaretLeft.displayName = \"CaretLeft\";\n\nexport default CaretLeft;\n"],"names":["FormProvider","children","onSubmit","methods","RHFTextField","name","helperText","other","control","useFormContext","render","field","error","fieldState","TextField","fullWidth","value","message","ProfileSchema","Yup","shape","firstName","required","about","avatar","nullable","useForm","resolver","yupResolver","defaultValues","watch","reset","setValue","handleSubmit","formState","isSubmitting","isSubmitSuccessful","data","console","log","useCallback","acceptedFiles","file","newFile","Object","assign","preview","URL","createObjectURL","shouldValidate","Stack","spacing","label","multiline","rows","direction","justifyContent","Button","color","size","type","variant","sx","width","Box","overflowY","height","backgroundColor","theme","palette","mode","background","boxShadow","p","alignItems","IconButton","Typography","paper","borderBottom","pathsByWeight","Map","set","React","points","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","opacity","d","renderPath","weight","renderPathForWeight","CaretLeft","forwardRef","props","ref","IconBase","displayName"],"sourceRoot":""}