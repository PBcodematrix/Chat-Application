{"version":3,"file":"static/js/957.bcf41e57.chunk.js","mappings":"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","sources":["components/ChatElement.js","components/Search/Search.js","components/Search/SearchIconWrapper.js","components/Search/StyledInputBase.js","components/StyledBadge.js","components/hook-form/FormProvider.js","components/hook-form/RHFTextField.js","pages/dashboard/Group.js","components/hook-form/RHFAutocomplete.js","sections/main/CreateGroup.js"],"sourcesContent":["import {\r\n    Box,\r\n    Typography,\r\n    Stack,\r\n    Avatar,\r\n  } from \"@mui/material\";\r\n  import React from \"react\";\r\n  import { useTheme } from \"@mui/material/styles\";\r\n  import StyledBadge from \"./StyledBadge\";\r\n  import Badge from \"@mui/material/Badge\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { SelectConversation } from \"../redux/Slices/app\";\r\n  \r\n  \r\n\r\nconst ChatElement = ({ id, name, img, msg, time, unread, online }) => {\r\n    const theme=useTheme();\r\n    const dispatch=useDispatch();\r\n  return (\r\n    <Box\r\n    onClick={()=>{\r\n      dispatch(SelectConversation({room_id:id}));\r\n    }}\r\n      sx={{\r\n        width: \"100%\",\r\n        borderRadius: 1,\r\n        backgroundColor: theme.palette.mode===\"light\"?\"#fff\":theme.palette.background.default,\r\n      }}\r\n      p={2}\r\n    >\r\n      <Stack\r\n        direction={\"row\"}\r\n        alignItems={\"center\"}\r\n        justifyContent={\"space-between\"}\r\n      >\r\n        <Stack direction={\"row\"} spacing={2}>\r\n          {online===\"Online\" ? (\r\n            <StyledBadge\r\n              overlap=\"circular\"\r\n              anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\r\n              variant=\"dot\"\r\n            >\r\n              <Avatar src={img} />\r\n            </StyledBadge>\r\n          ) : (\r\n            <Avatar src={img} />\r\n          )}\r\n          <Stack spacing={0.3}>\r\n            <Typography variant=\"subtitle2\">{name}</Typography>\r\n            <Typography variant=\"caption\">{msg}</Typography>\r\n          </Stack>\r\n        </Stack>\r\n        <Stack spacing={2} alignItems={\"center\"}>\r\n          <Typography sx={{ fontWeight: 600 }} variant=\"caption\">\r\n            {time}\r\n          </Typography>\r\n          <Badge color=\"primary\" badgeContent={unread}></Badge>\r\n        </Stack>\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ChatElement;","import { styled,alpha } from \"@mui/material/styles\";\r\n\r\nconst Search = styled(\"div\")(({ theme }) => ({\r\n    position: \"relative\",\r\n    borderRadius: 20,\r\n    backgroundColor: alpha(theme.palette.background.default, 1),\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: \"100%\",\r\n  }));\r\n  \r\n  export default Search;\r\n\r\n \r\n \r\n  ","import { styled } from \"@mui/material/styles\";\r\n\r\n\r\nconst SearchIconWrapper = styled(\"div\")(({ theme }) => ({\r\n    padding: theme.spacing(0, 2),\r\n    height: \"100%\",\r\n    position: \"absolute\",\r\n    pointerEvents: \"none\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  }));\r\n  \r\n  export default SearchIconWrapper;","import { InputBase } from \"@mui/material\";\r\nimport { styled } from \"@mui/material/styles\";\r\n\r\n\r\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n    color: \"inherit\",\r\n    \"& .MuiInputBase-input\": {\r\n      padding: theme.spacing(1, 1, 1, 0),\r\n      // vertical padding + font size from searchIcon\r\n      paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n      width: \"100%\",\r\n    },\r\n  }));\r\n  export default StyledInputBase;","import { Badge } from \"@mui/material\";\r\nimport {styled} from \"@mui/material/styles\"\r\n\r\nconst StyledBadge = styled(Badge)(({ theme }) => ({\r\n    \"& .MuiBadge-badge\": {\r\n      backgroundColor: \"#44b700\",\r\n      color: \"#44b700\",\r\n      boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n      \"&::after\": {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        borderRadius: \"50%\",\r\n        animation: \"ripple 1.2s infinite ease-in-out\",\r\n        border: \"1px solid currentColor\",\r\n        content: '\"\"',\r\n      },\r\n    },\r\n    \"@keyframes ripple\": {\r\n      \"0%\": {\r\n        transform: \"scale(.8)\",\r\n        opacity: 1,\r\n      },\r\n      \"100%\": {\r\n        transform: \"scale(2.4)\",\r\n        opacity: 0,\r\n      },\r\n    },\r\n  }));\r\n\r\n  export default StyledBadge;","import PropTypes from 'prop-types';\r\n// form\r\nimport { FormProvider as Form } from 'react-hook-form';\r\n\r\n\r\n\r\nFormProvider.propTypes = {\r\n  children: PropTypes.node,\r\n  methods: PropTypes.object,\r\n  onSubmit: PropTypes.func,\r\n};\r\n\r\nexport default function FormProvider({ children, onSubmit, methods }) {\r\n  return (\r\n    <Form {...methods}>\r\n      <form onSubmit={onSubmit}>{children}</form>\r\n    </Form>\r\n  );\r\n}","import PropTypes from 'prop-types';\r\n// form\r\nimport { useFormContext, Controller } from 'react-hook-form';\r\n// @mui\r\nimport { TextField } from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nRHFTextField.propTypes = {\r\n  name: PropTypes.string,\r\n  label:PropTypes.string,\r\n  helperText: PropTypes.node,\r\n};\r\n\r\nexport default function RHFTextField({ name, helperText, ...other }) {\r\n  const { control } = useFormContext();\r\n\r\n  return (\r\n    <Controller\r\n      name={name}\r\n      control={control}\r\n      render={({ field, fieldState: { error } }) => (\r\n        <TextField\r\n          {...field}\r\n          fullWidth\r\n          \r\n          value={typeof field.value === 'number' && field.value === 0 ? '' : field.value}\r\n          error={!!error}\r\n          helperText={error ? error?.message : helperText}\r\n          {...other}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}","import React, { useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Divider,\r\n  IconButton,\r\n  Link,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport {\r\n  Search,\r\n  SearchIconWrapper,\r\n  StyledInputBase,\r\n} from \"../../components/Search\";\r\nimport { MagnifyingGlass, Plus } from \"phosphor-react\";\r\nimport ChatElement from \"../../components/ChatElement\";\r\nimport { ChatList } from \"../../data\";\r\nimport CreateGroup from \"../../sections/main/CreateGroup\";\r\n\r\nconst Group = () => {\r\n  const theme = useTheme();\r\n  const [openDialog, setopenDialog] = useState(false);\r\n\r\n  const handleCloseDialog = () => {\r\n    setopenDialog(false);\r\n  };\r\n  return (\r\n    <>\r\n      <Stack direction={\"row\"} sx={{ width: \"100%\" }}>\r\n        {/* Left */}\r\n        <Box\r\n          sx={{\r\n            height: \"100vh\",\r\n            width: 320,\r\n            backgroundColor:\r\n              theme.palette.mode === \"light\"\r\n                ? \"#F8FAFF\"\r\n                : theme.palette.background,\r\n            boxShadow: \"0 0 2px rgba(0,0,0.25)\",\r\n          }}\r\n        >\r\n          <Stack p={3} spacing={2} sx={{ maxHeight: \"100vh\" }}>\r\n            <Stack>\r\n              <Typography variant=\"h5\">Groups</Typography>\r\n            </Stack>\r\n            <Stack sx={{ width: \"100%\" }}>\r\n              <Search>\r\n                <SearchIconWrapper>\r\n                  <MagnifyingGlass color=\"#709CE6\" />\r\n                </SearchIconWrapper>\r\n                <StyledInputBase placeholder=\"Search...\" />\r\n              </Search>\r\n            </Stack>\r\n            <Stack\r\n              direction={\"row\"}\r\n              alignItems={\"center\"}\r\n              justifyContent={\"space-between\"}\r\n            >\r\n              <Typography variant=\"subtitle2\" component={Link}>\r\n                Create new Group\r\n              </Typography>\r\n              <IconButton\r\n                onClick={() => {\r\n                  setopenDialog(true);\r\n                }}\r\n              >\r\n                <Plus style={{ color: theme.palette.primary.main }} />\r\n              </IconButton>\r\n            </Stack>\r\n            <Divider />\r\n            <Stack\r\n              spacing={3}\r\n              sx={{ flexGrow: 1, overflowY: \"auto\", height: \"100%\" }}\r\n            >\r\n              <Stack spacing={2.5}>\r\n                <Typography variant=\"subtitle2\" sx={{ color: \"#676667\" }}>\r\n                  Pinned\r\n                </Typography>\r\n                {ChatList.filter((el) => el.pinned).map((el) => {\r\n                  return <ChatElement {...el} />;\r\n                })}\r\n                <Typography variant=\"subtitle2\" sx={{ color: \"#676667\" }}>\r\n                  All Groups\r\n                </Typography>\r\n                {ChatList.filter((el) => !el.pinned).map((el) => {\r\n                  return <ChatElement {...el} />;\r\n                })}\r\n              </Stack>\r\n            </Stack>\r\n          </Stack>\r\n        </Box>\r\n\r\n        {/* Right */}\r\n        {/* //TODO =>Reuse conversational component */}\r\n      </Stack>\r\n      {openDialog && <CreateGroup open={openDialog} handleClose={handleCloseDialog} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Group;\r\n","import PropTypes from 'prop-types';\r\n// form\r\nimport { useFormContext, Controller } from 'react-hook-form';\r\n// @mui\r\nimport { Autocomplete, TextField } from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nRHFAutocomplete.propTypes = {\r\n  name: PropTypes.string,\r\n  label:PropTypes.string,\r\n  helperText: PropTypes.node,\r\n};\r\n\r\nexport default function RHFAutocomplete({ name,label, helperText, ...other }) {\r\n  const { control,setValue } = useFormContext();\r\n\r\n  return (\r\n    <Controller\r\n      name={name}\r\n      control={control}\r\n      render={({ field, fieldState: { error } }) => (\r\n        <Autocomplete\r\n          {...field}\r\n          onChange={(event, newValue) => setValue(name, newValue, { shouldValidate: true })}\r\n          renderInput={(params) => (\r\n            <TextField\r\n              label={label}\r\n              error={!!error}\r\n              helperText={error ? error?.message : helperText}\r\n              {...params}\r\n            />\r\n          )}\r\n          {...other}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Slide,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport * as Yup from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport FormProvider from \"../../components/hook-form/FormProvider\";\r\nimport { RHFTextField } from \"../../components/hook-form\";\r\nimport RHFAutocomplete from \"../../components/hook-form/RHFAutocomplete\";\r\nimport { useSelector } from \"react-redux\";\r\n// TODO=>Create a reusable component\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst MEMBERS = [\"NAME1\", \"NAME2\", \"NAME3\"];\r\n\r\nconst CreateGroupForm = ({ handleClose }) => {\r\n  const newGroupSchema = Yup.object().shape({\r\n    title: Yup.string().required(\"Title is required\"),\r\n    members: Yup.array().min(2, \"Must have atleast 2 members\"),\r\n  });\r\n  const { friends } = useSelector((state) => state.app);\r\n  const defaultValues = {\r\n    title: \"\",\r\n    members: [],\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(newGroupSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    watch,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful, isValid },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      console.log(data);\r\n    } catch (error) {\r\n      console.log(error, \"error\");\r\n    }\r\n  };\r\n  return (\r\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n      <Stack spacing={3}>\r\n        <RHFTextField name=\"title\" label=\"Title\" />\r\n        <RHFAutocomplete\r\n          name=\"members\"\r\n          label={\"Members\"}\r\n          multiple\r\n          freeSolo\r\n          options={friends?.map((option) => {\r\n            const name = `${option.firstName} ${option.lastName}`;\r\n            return name;\r\n          })}\r\n          ChipProps={{ size: \"medium\" }}\r\n        />\r\n        <Stack\r\n          spacing={2}\r\n          direction={\"row\"}\r\n          alignItems=\"center\"\r\n          justifyContent={\"end\"}\r\n        >\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n          <Button type=\"submit\" variant=\"contained\">\r\n            Create\r\n          </Button>\r\n        </Stack>\r\n      </Stack>\r\n    </FormProvider>\r\n  );\r\n};\r\n\r\nconst CreateGroup = ({ open, handleClose }) => {\r\n  return (\r\n    <Dialog\r\n      fullWidth\r\n      maxWidth=\"xs\"\r\n      open={open}\r\n      TransitionComponent={Transition}\r\n      keepMounted\r\n      sx={{ p: 4 }}\r\n    >\r\n      <DialogTitle sx={{ mb: 3 }}>Create new Group</DialogTitle>\r\n      <DialogContent>\r\n        <CreateGroupForm handleClose={handleClose} />\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default CreateGroup;\r\n"],"names":["id","name","img","msg","time","unread","online","theme","useTheme","dispatch","useDispatch","onClick","SelectConversation","room_id","sx","width","borderRadius","backgroundColor","palette","mode","background","default","p","direction","alignItems","justifyContent","spacing","overlap","anchorOrigin","vertical","horizontal","variant","src","fontWeight","color","badgeContent","styled","position","alpha","marginRight","marginLeft","padding","height","pointerEvents","display","InputBase","paddingLeft","StyledBadge","Badge","boxShadow","paper","top","left","animation","border","content","transform","opacity","FormProvider","children","onSubmit","methods","RHFTextField","helperText","other","control","useFormContext","render","field","error","fieldState","TextField","fullWidth","value","message","useState","openDialog","setopenDialog","maxHeight","placeholder","component","Link","style","primary","main","flexGrow","overflowY","ChatList","el","pinned","map","open","handleClose","RHFAutocomplete","label","setValue","Autocomplete","onChange","event","newValue","shouldValidate","renderInput","params","Transition","React","props","ref","Slide","CreateGroupForm","newGroupSchema","Yup","shape","title","required","members","min","friends","useSelector","state","app","useForm","resolver","yupResolver","defaultValues","handleSubmit","reset","watch","setError","formState","errors","isSubmitting","isSubmitSuccessful","isValid","data","console","log","Stack","multiple","freeSolo","options","option","firstName","lastName","ChipProps","size","Button","type","Dialog","maxWidth","TransitionComponent","keepMounted","DialogTitle","mb","DialogContent"],"sourceRoot":""}